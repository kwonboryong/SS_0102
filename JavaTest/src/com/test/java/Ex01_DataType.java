package com.test.java;

public class Ex01_DataType {
	public static void main(String[] args) {
		
		/* 자료형
		: 데이터의 형태
		- 데이터의 길이(범위), 생김새(형태)를 미리 정의해놓고, 그 정의에 따라 데이터를 분류해놓은 규칙
		
		자료형의 기준
		(1) 형태
		(2) 길이
		
		자료형의 분류 (*암기*)
		1. 기본형 (= 원시형(Primitive Type), 값형(Value Type))
		- 8가지 (byte, short, int, long, float, double, char, boolean)
		
			a. 숫자형
				(1) 정수형
					1-1. byte: 정수를 저장하는 메모리 1칸(8칸)
						- 1byte (= 8 bite)
						- 2^8
						- -128 ~ 127 
						- 첫 번째 부호 비트가 0이면 양수, 1이면 음수
						- 나머지 7비트는 데이터 비트
						00000001 = 1
						10000001 = -1
						
					1-2. short: 2칸
						- 2byte (= 16 bite)
						- 2^16
						- -32768 ~ 32767
						
					1-3. int: 4칸
						- 4byte (= 32 bite)
						- 2^32
						- -21억 ~ 21억
						
					1-4. long: 8칸
						- 8byte (= 64 bite)
						- 2^64
						- -922경 ~ 922경
				
					* 1, 0을 저장할 수 있는 메모리 공간 1칸 = bite
					* (연속된) 최소한으로 얻어올 수 있는 공간 = 1byte (8 bite)
					* byte로만 작업함 (bite는 사용 X)
					
					
				(2) 실수형
					2-1. float
						- 4byte
						- 범위: 무한대
						- 지수 길이(10의 지수)는 8bite + 가수 길이는 23bit
						- 정수 포함 모든 숫자의 6 ~ 7자리를 표현
						- 단정도형이라고도 부름
						
					2-2. double
						- 8byte
						- 범위: 무한대
						- 지수 길이(10의 지수)는 11bite + 가수 길이는 52bit
						- 정수 포함 모든 숫자의 15 ~ 16자리를 표현
						- 배정도형
						
					* 부동 소수점 방식: 1.23x2e-1 (가수 + 지수)
					* 예) 192200000000000000000 = 1922 x 10 ^ 17
					* 장점: 표현할 수 있는 숫자의 범위가 매우 넓다 
					* 단점: 10자리 이후부터 숫자를 잘라버림 -> 잘린 범위는 0으로 바뀜
					
			b. 문자형
				(1) char
					- 2byte
					- 숫자형 (정수형)
					- 0 ~ 65535
					- 음수 없음
					- 유니코드 사용(Unicode): 16비트로 표현하는 문자 체계 (아스키 코드 + 추가)
				
			c. 논리형
				(1) boolean
		
		
		2. 참조형 (Reference Type)
		- 클래스 (class) => 사용자가 갯수를 정의 가능
		- 배열(Array)
		- 열거형(Enum)
		- 인터페이스(Interface)
		
		
		

		 
		 
		 
		 */
		
		
	}
}
